{
    "app.title": "SQL Dungeon",
    "app.title.beginner": "SQL Dungeon - Beginner -",
    "app.intro.text": "Master SQL spells and solve the dungeon's mysteries!",
    "button.sandbox": "Sandbox",
    "button.ku_next": "Clause Next",
    "button.hint": "ï¼Ÿ",
    "game.inventory.title": "Learned Spells",
    "game.mission.title": "Mission",
    "game.schema.title": "Conceptual Schema",
    "game.editor.title": "Cast Spell",
    "game.result.title": "Execution Result",
    "modal.hint.title": "Hint",
    "modal.close": "Ã—",
    "game.editor.placeholder": "Enter SQL here...",
            
    "button.start": "New Game",
    "button.load": "Load Game",
    "button.retry": "Try Again",
    "button.save": "Save",
    "button.execute": "Execute",
    "button.shop": "Visit Shop",
    "button.next_floor": "Next Floor",
    "button.prev_floor": "Previous Floor",
    "button.next_dungeon": "Next Dungeon",
    "button.close": "Close",
    "button.yes": "Yes",

    "panel.inventory": "Learned Spells",
    "panel.mission": "Mission",
    "panel.schema": "Conceptual Schema",
    "panel.spell": "Cast Spell",
    "panel.result": "Execution Result",

    "status.gold": "ðŸ’° %s G",
    "status.energy": "âš¡ %s E",

    "shop.title": "Shop",
    "shop.hint.title": "Purchase Hint",
    "shop.hint.confirm": "Would you like to see the hint?\nCosts ðŸ’° %s G.",
    "shop.hint.sage": "Sage's Voice",
    "shop.hint.no_gold": "Not enough gold!",

    "message.save_success": "Game saved!",
    "message.load_success": "Game loaded!",
    "message.empty_query": "Please enter a query.",
    "message.invalid_query": "Invalid query.",
    "message.no_energy": "Not enough energy!",
    "message.unknown_spell": "You haven't learned the spell '%s' yet.",
    "message.incorrect": "Incorrect. Try again.",
    "message.correct": "Correct! Query result:",
    "message.clear": "Clear!",
    "message.clear_all": "You've cleared all floors!",
    "message.next_spell": "Sage's Voice: \"The next clause should be... %s.\"",
    "message.purchase_success": "Purchased %s!",
    "message.emulation_auto_accept": "Emulation produced results and was accepted.",
    "message.emulation_results": "Incorrect, but emulation returned results:",
    "message.incorrect_try": "Incorrect. Try again.",
    "message.correct_result": "Correct! Query result:",
    "message.load_failed": "Failed to load game data.",
    "message.sandbox_select_from": "Sandbox: run SELECT ... FROM ... only.",
    "message.sandbox_result": "Sandbox execution result:",
    "message.error_table_not_found": "Table not found: %s",
    "message.error_attribute_not_found": "Attribute not found: %s",
    "message.error_where_column_missing": "Column in WHERE clause not found: %s",
    "message.error_no_matching_rows": "No rows match the specified conditions.",
    "message.dataset_label": "Dataset:",
    "message.floor_label": "Floor %s",
    "confirm.unsaved_changes": "You have unsaved changes. Return to title without saving?",
    "button.back_to_title": "Back to title",
    "ui.back_to_title": "Back to title",
    "ui.prev_floor": "Go back to previous floor",
    "ui.gold_status": "Gold: %s",
    "ui.energy_status": "Energy: %s",
    "ui.schema_table": "Table: %s",
    "ui.schema_column": "Column: %s",

    "settings.title": "Settings",
    "settings.language_label": "Language:",
    "settings.enable_esc": "Close dialogs with ESC",
    "settings.enable_save_shortcut": "Save with Ctrl+S",
    "settings.export_json": "Export JSON",
    "settings.import_json": "Import JSON",
    "settings.save": "Save",
    "settings.cancel": "Cancel",

    "item.sqldungeons.java_coffee": "Java Coffee",
    "item.sqldungeons.java_coffee.desc": "Recovers 5 Energy.",
    "item.sqldungeons.postgres_ramen": "Postgres Ramen",
    "item.sqldungeons.postgres_ramen.desc": "Recovers 15 Energy.",
    "item.sqldungeons.oracle_steak": "Oracle Steak",
    "item.sqldungeons.oracle_steak.desc": "Recovers 30 Energy.",
    "item.sqldungeons.ku_next": "Clause Next (x%d)",
    "item.sqldungeons.ku_next.desc": "A scroll that tells you the next SQL clause.",
    "item.sqldungeons.ku_next_pack": "Clause Next Pack",
    "item.sqldungeons.ku_next_pack.desc": "Contains multiple Clause Next scrolls (x5).",
    "item.sqldungeons.having": "Single-use 'HAVING'",
    "item.sqldungeons.having.desc": "One-time use spell for post-aggregation filtering.",
    "item.sqldungeons.consumable_having": "Consumable HAVING",
    "item.sqldungeons.consumable_having.desc": "A consumable that grants one-time HAVING usage.",

    "sql.keyword.select": "SELECT",
    "sql.keyword.from": "FROM",
    "sql.keyword.where": "WHERE",
    "sql.keyword.group": "GROUP",
    "sql.keyword.by": "BY",
    "sql.keyword.having": "HAVING",
    "sql.keyword.inner": "INNER",
    "sql.keyword.join": "JOIN",
    "sql.keyword.on": "ON",
    "sql.keyword.as": "AS",
    "sql.keyword.sum": "SUM",
    "sql.keyword.count": "COUNT",
    "sql.keyword.in": "IN",

    "schema.pk": "Primary Key",
    "schema.ck": "Candidate Key",
    "schema.fk": "Foreign Key (refs: %s)",
    "schema.type.integer": "Integer",
    "schema.type.date": "Date",
    "schema.type.text": "Text",
    "schema.not_null": "NOT NULL",

    "sql.next.select": "SELECT",
    "sql.next.from": "FROM",
    "sql.next.where": "WHERE / JOIN / GROUP BY",
    "sql.next.group": "GROUP BY / JOIN",
    "sql.next.having": "HAVING",
    "sql.next.join": "ON",

    "sql.next.unknown": "Unknown",

    "dungeon.tutorial.prefix": "Tutorial %s",
    "dungeon.beginner.prefix": "Floor %s",

    "dungeon.tutorial.floor1.title": "Show everything with SELECT",
    "dungeon.tutorial.floor1.story": "Type the spell `SELECT * FROM table001` into the editor and execute it.",
    "dungeon.tutorial.floor1.hint": "",

    "dungeon.tutorial.floor2.title": "Select specific columns",
    "dungeon.tutorial.floor2.story": "Use `SELECT (column) FROM (table)` to display specific columns. Check the conceptual schema for the table name and retrieve the `message` column.",
    "dungeon.tutorial.floor2.hint": "",

    "dungeon.tutorial.floor3.title": "Filter with WHERE",
    "dungeon.tutorial.floor3.story": "Use `SELECT ... FROM ... WHERE (condition)` to filter rows. From the `fruits` table, display `name` and `color` where `color = 'Red'`. Conditions look like `column = 'value'`. You can also use <, >, <=, >=, <>.",
    "dungeon.tutorial.floor3.hint": "",

    "dungeon.tutorial.floor4.title": "Sort with ORDER BY",
    "dungeon.tutorial.floor4.story": "Use `ORDER BY (column) [ASC|DESC]` to sort results. From the `fruits` table, show `name` and `price` ordered by `price` ascending. `ORDER BY id` sorts by `id` ascending; ASC is the default, use DESC for descending.",
    "dungeon.tutorial.floor4.hint": "",

    "dungeon.tutorial.floor5.title": "Aggregate with GROUP BY",
    "dungeon.tutorial.floor5.story": "Use `SELECT ... FROM ... GROUP BY (column)` to group rows. From `fruits`, count how many fruits there are per `color`. Aggregation functions include COUNT, SUM, AVG, MIN, MAX. `COUNT(*)` counts rows, e.g. `SELECT color, COUNT(*) FROM fruits`.",
    "dungeon.tutorial.floor5.hint": "",

    "dungeon.beginner.floor1.title": "Beginner SELECT",
    "dungeon.beginner.floor2.title": "GROUP BY Challenge",
    "dungeon.beginner.floor2.story": "A monster lair. Count monsters per `species` from the `monsters` table.",
    "dungeon.beginner.floor2.hint": "Use `GROUP BY` to aggregate per group.",

    "dungeon.beginner.floor3.title": "INNER JOIN Spell",
    "dungeon.beginner.floor3.story": "In the guild hall. Join `employees` and `departments` and list each employee's `emp_name` and `dept_name`.",
    "dungeon.beginner.floor3.hint": "Use `INNER JOIN ... ON ...` to connect tables by a common column.",

    "dungeon.beginner.floor4.title": "Find affordable fruits",
    "dungeon.beginner.floor4.story": "From the fruits table, display name and price for rows where price < 150.",
    "dungeon.beginner.floor4.hint": "Use a WHERE clause to filter rows by price.",

    "dungeon.beginner.floor5.title": "Retrieve a message",
    "dungeon.beginner.floor5.story": "From table001, fetch the message for the row where id = 2.",
    "dungeon.beginner.floor5.hint": "To target a specific row, use the primary key in a WHERE clause like `WHERE id = 2`.",

    "dungeon.beginner.floor6.title": "Filter by product category",
    "dungeon.beginner.floor6.story": "From products, display name and price where category = 'æ­¦å™¨'.",
    "dungeon.beginner.floor6.hint": "Use WHERE category = 'æ­¦å™¨' to select only products of a specific category.",

    "dungeon.beginner.floor7.title": "Filter monsters by HP",
    "dungeon.beginner.floor7.story": "From monsters, display name and hp for rows where hp > 20.",
    "dungeon.beginner.floor7.hint": "Use numeric comparisons like > and < to filter by HP.",

    "dungeon.beginner.floor8.title": "Join and filter by department",
    "dungeon.beginner.floor8.story": "Inner join employees and departments, then show emp_name and dept_name where departments.dept_name = 'é–‹ç™ºéƒ¨'.",
    "dungeon.beginner.floor8.hint": "Combine JOIN and WHERE to filter after joining.",

    "dungeon.beginner.floor9.title": "Group and filter by count",
    "dungeon.beginner.floor9.story": "Group fruits by color and show groups having COUNT(*) > 1.",
    "dungeon.beginner.floor9.hint": "Use GROUP BY with HAVING to filter aggregated results.",

    "dungeon.beginner.floor10.title": "Find affordable fruits",
    "dungeon.beginner.floor10.story": "From the fruits table, display name and price for rows where price < 150.",
    "dungeon.beginner.floor10.hint": "Use a WHERE clause to filter rows by price.",

    "dungeon.beginner.floor11.title": "Find employees with big sales",
    "dungeon.beginner.floor11.story": "Select emp_name from employees where emp_id IN (SELECT emp_id FROM sales WHERE quantity > 5).",
    "dungeon.beginner.floor11.hint": "Use IN with a subquery to relate rows between tables.",

    "dungeon.beginner.floor12.title": "Department sales totals",
    "dungeon.beginner.floor12.story": "Join sales, employees, and departments and show SUM(quantity) grouped by dept_name.",
    "dungeon.beginner.floor12.hint": "Use JOIN combined with GROUP BY to aggregate per department.",

    "dungeon.beginner.floor13.title": "Date-filtered aggregation",
    "dungeon.beginner.floor13.story": "For sales before 2025-02-01, show SUM(quantity) per dept_name.",
    "dungeon.beginner.floor13.hint": "Be mindful of date formats when comparing dates as strings.",

    "dungeon.beginner.floor14.title": "Filter after aggregation with HAVING",
    "dungeon.beginner.floor14.story": "Aggregate sales since 2025-02-01 by department and show only those with SUM(quantity) > 5.",
    "dungeon.beginner.floor14.hint": "HAVING applies conditions to grouped results.",

    "dungeon.beginner.floor15.title": "Final Trial: Department sales filter",
    "dungeon.beginner.floor15.story": "Join three tables, filter by date (>= '2025-02-01'), group by dept_name and show departments with SUM(quantity) >= 10.",
    "dungeon.beginner.floor15.hint": "Join 3 tables, filter by date with WHERE, aggregate with GROUP BY, and finalize with HAVING!",

    "sql.keyword.select.desc": "Basic clause to select columns from a table.",
    "sql.keyword.from.desc": "Specifies the table to retrieve data from.",
    "sql.keyword.where.desc": "Filters rows based on a condition.",
    "sql.keyword.group.desc": "Indicates the start of grouping.",
    "sql.keyword.by.desc": "Specifies keys for grouping or sorting.",
    "sql.keyword.inner.desc": "Performs an inner join.",
    "sql.keyword.outer.desc": "Performs an outer join.",
    "sql.keyword.left.desc": "Performs a left outer join.",
    "sql.keyword.right.desc": "Performs a right outer join.",
    "sql.keyword.join.desc": "Joins two or more tables.",
    "sql.keyword.on.desc": "Specifies the condition for joining tables.",
    "sql.keyword.as.desc": "Gives an alias to a column or table.",
    "sql.keyword.sum.desc": "An aggregate function that calculates the total.",
    "sql.keyword.avg.desc": "An aggregate function that calculates the average.",
    "sql.keyword.min.desc": "An aggregate function that returns the minimum value.",
    "sql.keyword.max.desc": "An aggregate function that returns the maximum value.",
    "sql.keyword.count.desc": "An aggregate function that counts rows.",
    "sql.keyword.having.desc": "Specifies conditions after grouping.",
    "sql.keyword.in.desc": "Checks if a value is in a given set."
}
